public class UserLoginService{

	//로그인 실행 로직
	public String UserLogin(String UserId, String UserPw) throws Exception{
		UserInfo userinfo = this.uir.findById(UserId).orElse(null);
		if(userinfo==null) {
			return "IdError";
		}
		else if(!userinfo.getUserPw().equals(Hashing(UserPw.getBytes(), userinfo.getSalt()))) { // 웹에서 입력받은 비밀 번호가 Hashing(UserPw.getBytes(), userinfo.getSalt())값과 같은지 
			return "PwError";
		}
		return "Success";
	}
	
	//회원 가입 로직 (제출시 DB에 등록)
	public void UserInfoRegister(UserInfoCreateDTO uicDTO) throws Exception {
		UserInfo userinfo = UserInfo.builder()
					.UserId(uicDTO.getUserId())
					.Salt(uicDTO.getSalt())
					.UserPw(Hashing(uicDTO.getUserPw().getBytes(), uicDTO.getSalt())) // 웹에서 회원가입 시 입력한 비밀번호를 byte 배열로 변환 + UserInfoCreateDTO 초기 생성시 할당된 salt를 Hashing의 매개변수로 사용
					.UserName(uicDTO.getUserName())
					.UserRegNum(uicDTO.getUserRegNum())
					.UserGender(uicDTO.getUserGender())
					.UserPhone(uicDTO.getUserPhone())
					.UserAddress1(uicDTO.getUserAddress1())
					.UserAddress2(uicDTO.getUserAddress2())
					.build();
		this.uir.save(userinfo); // 회원 정보 저장
	}
	
	public String Byte_to_String(byte[] temp) {
		StringBuilder sb = new StringBuilder();
		for(byte a: temp) {
			sb.append(String.format("%02x", a)); // %02x는 두 자릿수의 16진수로 표현하는 스트링 포맷
		}
		return sb.toString();
	}
	
	public String Hashing(byte[] password, String salt) throws Exception{//해싱 함수: 임의의 길이값을 받아 고정된 길이의 값으로 반환
		MessageDigest md = MessageDigest.getInstance("SHA-256"); 
		for(int i = 0; i < 10000; i++) {
			String temp = Byte_to_String(password)+salt;//입력바다은 
			md.update(temp.getBytes());
			password = md.digest();
		}
		return Byte_to_String(password);
	}

}